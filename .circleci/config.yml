# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    # BEGIN erod custom
    steps:
      - checkout
      - run: echo "Hello CircleCI!"
      - run: |
          echo "running multi command"
          pwd
          ls
          echo "User information:"
          id
          echo ~
      - run: |
          python3 --version
          pip3 --version
          sudo pip3 install robotframework
          sudo pip3 install requests
      - setup_remote_docker:
          version: 17.05.0-ce
      - run: |
          docker build -t inzbox/circleci_nginx .
          docker image ls
          docker login -u $DOCKERUSER -p $DOCKERPASSWORD
          docker push inzbox/circleci_nginx
      # Setup kubectl
      - run: |
          #wget -q https://storage.googleapis.com/kubernetes-release/release/v1.8.3/bin/linux/amd64/kubectl
          #chmod 755 kubectl
          cd k8/config
          ls -l
          ./kubectl version --short=true --client
          ./configure_kubectl.sh
          ./kubectl get pod
      - run: |
          pwd
      #- run: |
      #    cd py_tests/tests
      #    robot tests.robot
      - run: |
          wget http://18.216.216.236:30008
          ls -l
          cat index.html
    # END erod custom

#    working_directory: ~/repo
#
#    steps:
#      - checkout
#
#      # Download and cache dependencies
#      - restore_cache:
#          keys:
#          - v1-dependencies-{{ checksum "requirements.txt" }}
#          # fallback to using the latest cache if no exact match is found
#          - v1-dependencies-
#
#      - run:
#          name: install dependencies
#          command: |
#            python3 -m venv venv
#            . venv/bin/activate
#            pip install -r requirements.txt
#
#      - save_cache:
#          paths:
#            - ./venv
#          key: v1-dependencies-{{ checksum "requirements.txt" }}
#        
#      # run tests!
#      - run:
#          name: run tests
#          command: |
#            . venv/bin/activate
#            python manage.py test
#
#      - store_artifacts:
#          path: test-reports
#          destination: test-reports
